{"version":3,"sources":["index.js"],"names":["DEFAULT_TASKS","id","done","text","NewTaskEntry","props","useState","taskText","setTaskText","isTask","onSubmit","event","preventDefault","addTask","className","type","autoFocus","value","onChange","target","ClearDoneButton","clearDone","TaskListItem","defaultChecked","task","onChangeTaskIdDone","TaskList","items","tasks","map","onChangeTaskDone","Project","JSON","parse","stringify","setTasks","projectName","maxId","length","Math","max","concat","taskId","idx","findIndex","_tasks","slice","filter","App","ReactDOM","render","document","getElementById"],"mappings":"wKAIMA,G,MAAgB,CACpB,CAAEC,GAAI,EAAGC,MAAM,EAAMC,KAAM,YAC3B,CAAEF,GAAI,EAAGC,MAAM,EAAOC,KAAM,cAGxBC,EAAe,SAAAC,GAAU,IAAD,EACIC,mBAAS,IADb,mBACrBC,EADqB,KACXC,EADW,KAYtBC,EAAsB,KAAbF,EAEf,OACE,uBAAMG,SAZa,SAACC,GACpBA,EAAMC,iBACW,KAAbL,IAGJF,EAAMQ,QAAQN,GACdC,EAAY,MAMZ,UACE,uBACEM,UAAU,SACVC,KAAK,OACLC,UAAU,YACVC,MAAOV,EACPW,SAAU,SAACP,GAAD,OAAWH,EAAYG,EAAMQ,OAAOF,UAEhD,uBACEH,UAAW,qBAAuBL,EAAS,GAAK,iBAChDM,KAAK,SACLE,MAAM,iBAMRG,EAAkB,SAAAf,GACtB,OACE,sBAAMK,SAAUL,EAAMgB,UAAtB,SACE,uBAAOP,UAAU,cAAcC,KAAK,SAASE,MAAM,kBAKnDK,EAAe,SAAAjB,GACnB,OACE,6BACE,kCACE,uBACEkB,eAAgBlB,EAAMmB,KAAKtB,KAC3BgB,SAAUb,EAAMoB,mBAChBV,KAAK,WACLD,UAAU,SAEZ,sBAAMA,UAAWT,EAAMmB,KAAKtB,KAAO,6BAA+B,GAAlE,SACGG,EAAMmB,KAAKrB,aAOtB,SAASuB,EAASrB,GAChB,IAAMsB,EAAQtB,EAAMuB,MAAMC,KAAI,SAACL,GAAD,OAC5B,cAACF,EAAD,CACEE,KAAMA,EACNC,mBAAoB,kBAAMpB,EAAMyB,iBAAiBN,EAAKvB,MAFrCuB,EAAKvB,OAK1B,OAAO,oBAAIa,UAAU,iBAAd,SAAgCa,IAGzC,IAAMI,EAAU,SAAC1B,GAAU,MAGCC,mBAAS0B,KAAKC,MAAMD,KAAKE,UAAUlC,KAHpC,mBAGlB4B,EAHkB,KAGXO,EAHW,KAyBzB,OACE,sBAAKrB,UAAU,YAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCT,EAAM+B,cACzC,cAAChC,EAAD,CAAcS,QAhBF,SAACN,GACf,IAAM8B,EAAQT,EAAMU,OAChBC,KAAKC,IAAL,MAAAD,KAAI,YAAQX,EAAMC,KAAI,SAACL,GAAD,OAAUA,EAAKvB,QACrC,EAEJkC,EAAS,CAAC,CAAEjC,MAAM,EAAOC,KAAMI,EAAUN,GAAIoC,EAAQ,IAAKI,OAAOb,OAY/D,cAACF,EAAD,CACEE,MAAOA,EACPE,iBA1BuB,SAACY,GAC5B,IAAMC,EAAMf,EAAMgB,WAAU,SAACpB,GAAD,OAAUA,EAAKvB,KAAOyC,KAC5CG,EAASjB,EAAMkB,QACrBD,EAAOF,GAAKzC,MAAO2C,EAAOF,GAAKzC,KAC/BiC,EAASU,MAwBP,cAACzB,EAAD,CAAiBC,UAbH,SAACV,GACjBA,EAAMC,iBACNuB,EAASP,EAAMmB,QAAO,SAAAvB,GAAI,OAAKA,EAAKtB,gBAgBxC,SAAS8C,IACP,OACE,gCACE,cAACjB,EAAD,CAASK,YAAY,MACrB,cAACL,EAAD,CAASK,YAAY,SAK3Ba,IAASC,OAAO,cAACF,EAAD,IAASG,SAASC,eAAe,W","file":"static/js/main.302dc037.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tailwind.css\";\n\nconst DEFAULT_TASKS = [\n  { id: 0, done: true, text: \"Buy milk\" },\n  { id: 1, done: false, text: \"Call mum\" },\n];\n\nconst NewTaskEntry = props => {\n  const [taskText, setTaskText] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (taskText === \"\") {\n      return;\n    }\n    props.addTask(taskText);\n    setTaskText(\"\");\n  };\n\n  const isTask = taskText !== \"\";\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"border\"\n        type=\"text\"\n        autoFocus=\"autofocus\"\n        value={taskText}\n        onChange={(event) => setTaskText(event.target.value)}\n      />\n      <input\n        className={\"border mx-2 px-2 \" + (isTask ? \"\" : \"text-gray-400\")}\n        type=\"submit\"\n        value=\"Add task\"\n      />\n    </form>\n  );\n}\n\nconst ClearDoneButton = props => {\n  return (\n    <form onSubmit={props.clearDone}>\n      <input className=\"border px-2\" type=\"submit\" value=\"Clear done\" />\n    </form>\n  );\n}\n\nconst TaskListItem = props => {\n  return (\n    <li>\n      <label>\n        <input\n          defaultChecked={props.task.done}\n          onChange={props.onChangeTaskIdDone}\n          type=\"checkbox\"\n          className=\"mr-2\"\n        />\n        <span className={props.task.done ? \"line-through text-gray-400\" : \"\"}>\n          {props.task.text}\n        </span>\n      </label>\n    </li>\n  );\n}\n\nfunction TaskList(props) {\n  const items = props.tasks.map((task) => (\n    <TaskListItem key={task.id}\n      task={task}\n      onChangeTaskIdDone={() => props.onChangeTaskDone(task.id)}\n    />\n  ));\n  return <ul className=\"list-none my-2\">{items}</ul>;\n}\n\nconst Project = (props) => {\n  // Deep copy DEFAULT_TASKS, otherwise Projects share state. Round trip to\n  // JSON is a simple way to do deep copy.\n  const [tasks, setTasks] = useState(JSON.parse(JSON.stringify(DEFAULT_TASKS)))\n\n  const handleChangeTaskDone = (taskId) => {\n    const idx = tasks.findIndex((task) => task.id === taskId);\n    const _tasks = tasks.slice();\n    _tasks[idx].done = _tasks[idx].done ? false : true;\n    setTasks(_tasks)\n  };\n\n  const addTask = (taskText) => {\n    const maxId = tasks.length\n      ? Math.max(...tasks.map((task) => task.id))\n      : 0;\n    // put new task at start of list\n    setTasks([{ done: false, text: taskText, id: maxId + 1 }].concat(tasks))\n  };\n\n  const clearDone = (event) => {\n    event.preventDefault();\n    setTasks(tasks.filter(task => !task.done))\n  };\n\n  return (\n    <div className=\"px-5 py-5\">\n      <h1 className=\"font-bold text-lg\">{props.projectName}</h1>\n      <NewTaskEntry addTask={addTask} />\n      <TaskList\n        tasks={tasks}\n        onChangeTaskDone={handleChangeTaskDone}\n      />\n      <ClearDoneButton clearDone={clearDone} />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <Project projectName=\"A\" />\n      <Project projectName=\"B\" />\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}