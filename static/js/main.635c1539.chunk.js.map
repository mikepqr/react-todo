{"version":3,"sources":["index.js"],"names":["Tasklist","_","taskId","this","props","toggleTaskDone","items","tasks","map","task","defaultChecked","done","onChange","event","handleChange","id","type","className","text","React","Component","Taskentry","setState","taskText","target","value","handleSubmit","preventDefault","state","addTask","isTask","onSubmit","autofocus","App","idx","findIndex","maxId","length","Math","max","concat","filter","clearDoneButton","clearDone","ReactDOM","render","document","getElementById"],"mappings":"sMAIMA,G,iLACSC,EAAGC,GACdC,KAAKC,MAAMC,eAAeH,K,+BAGlB,IAAD,OACDI,EAAQH,KAAKC,MAAMG,MAAMC,KAAI,SAACC,GAAD,OACjC,6BACE,kCACE,uBACEC,eAAgBD,EAAKE,KAGrBC,SAAU,SAACC,GAAD,OAAW,EAAKC,aAAaD,EAAOJ,EAAKM,KACnDC,KAAK,WACLC,UAAU,SAEZ,sBAAMA,UAAWR,EAAKE,KAAO,6BAA+B,GAA5D,SACGF,EAAKS,WAXHT,EAAKM,OAgBhB,OAAO,oBAAIE,UAAU,iBAAd,SAAgCX,Q,GAvBpBa,IAAMC,YA2BvBC,E,kDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAMRU,aAAe,SAACD,GACd,EAAKS,SAAS,CACZC,SAAUV,EAAMW,OAAOC,SATR,EAanBC,aAAe,SAACb,GACdA,EAAMc,iBACsB,KAAxB,EAAKC,MAAML,WAGf,EAAKnB,MAAMyB,QAAQ,EAAKD,MAAML,UAC9B,EAAKD,SAAS,CACZC,SAAU,OAlBZ,EAAKK,MAAQ,CACXL,SAAU,IAHK,E,qDAyBjB,IAAMO,EAAiC,KAAxB3B,KAAKyB,MAAML,SAC1B,OACE,uBAAMQ,SAAU5B,KAAKuB,aAArB,UACE,uBACET,UAAU,SACVD,KAAK,OACLgB,UAAU,YACVP,MAAOtB,KAAKyB,MAAML,SAClBX,SAAUT,KAAKW,eAEjB,uBACEG,UAAW,qBAAuBa,EAAS,GAAK,iBAChDd,KAAK,SACLS,MAAM,oB,GAvCQN,IAAMC,WA8CxBa,E,kDACJ,WAAY7B,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXrB,MAAO,CACL,CAAEQ,GAAI,EAAGJ,MAAM,EAAMO,KAAM,YAC3B,CAAEH,GAAI,EAAGJ,MAAM,EAAOO,KAAM,cALf,E,2DAUJhB,GACb,IAAMK,EAAQJ,KAAKyB,MAAMrB,MACnB2B,EAAM/B,KAAKyB,MAAMrB,MAAM4B,WAAU,SAAC1B,GAAD,OAAUA,EAAKM,KAAOb,KAC7DK,EAAM2B,GAAKvB,MAAOJ,EAAM2B,GAAKvB,KAC7BR,KAAKmB,SAAS,CACZf,Y,8BAIIgB,GACN,IAAMhB,EAAQJ,KAAKyB,MAAMrB,MACnB6B,EAAQjC,KAAKyB,MAAMrB,MAAM8B,OAC3BC,KAAKC,IAAL,MAAAD,KAAI,YAAQnC,KAAKyB,MAAMrB,MAAMC,KAAI,SAACC,GAAD,OAAUA,EAAKM,QAChD,EACJZ,KAAKmB,SAAS,CAEZf,MAAO,CAAC,CAAEI,MAAM,EAAOO,KAAMK,EAAUR,GAAIqB,EAAQ,IAAKI,OAAOjC,O,gCAIzDM,GACRA,EAAMc,iBACNxB,KAAKmB,SAAS,CACZf,MAAOJ,KAAKyB,MAAMrB,MAAMkC,QAAO,SAAChC,GAAD,OAAWA,EAAKE,Y,+BAIzC,IAAD,OACD+B,EACJ,sBAAMX,SAAU,SAAClB,GAAD,OAAW,EAAK8B,UAAU9B,IAA1C,SACE,uBAAOI,UAAU,cAAcD,KAAK,SAASS,MAAM,iBAGvD,OACE,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,oBAAd,kBACA,cAACI,EAAD,CAAWQ,QAAS,SAACN,GAAD,OAAc,EAAKM,QAAQN,MAC/C,cAACvB,EAAD,CACEO,MAAOJ,KAAKyB,MAAMrB,MAClBF,eAAgB,SAACH,GAAD,OAAY,EAAKG,eAAeH,MAEjDwC,S,GApDSvB,IAAMC,WA0DxBwB,IAASC,OAAO,cAACZ,EAAD,IAASa,SAASC,eAAe,W","file":"static/js/main.635c1539.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\n\nclass Tasklist extends React.Component {\n  handleChange(_, taskId) {\n    this.props.toggleTaskDone(taskId);\n  }\n\n  render() {\n    const items = this.props.tasks.map((task) => (\n      <li key={task.id}>\n        <label>\n          <input\n            defaultChecked={task.done}\n            // onChange is passed a single argument, the event, by the browser. We\n            // need it to know about the task.id, so we make it a closure.\n            onChange={(event) => this.handleChange(event, task.id)}\n            type=\"checkbox\"\n            className=\"mr-2\"\n          />\n          <span className={task.done ? 'line-through text-gray-400' : ''}>\n            {task.text}\n          </span>\n        </label>\n      </li>\n    ));\n    return <ul className=\"list-none my-2\">{items}</ul>;\n  }\n}\n\nclass Taskentry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskText: '',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      taskText: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.taskText === '') {\n      return;\n    }\n    this.props.addTask(this.state.taskText);\n    this.setState({\n      taskText: '',\n    });\n  };\n\n  render() {\n    const isTask = this.state.taskText !== '';\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"border\"\n          type=\"text\"\n          autofocus=\"autofocus\"\n          value={this.state.taskText}\n          onChange={this.handleChange}\n        />\n        <input\n          className={'border mx-2 px-2 ' + (isTask ? '' : 'text-gray-400')}\n          type=\"submit\"\n          value=\"Add task\"\n        />\n      </form>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        { id: 0, done: true, text: 'Buy milk' },\n        { id: 1, done: false, text: 'Call mum' },\n      ],\n    };\n  }\n\n  toggleTaskDone(taskId) {\n    const tasks = this.state.tasks;\n    const idx = this.state.tasks.findIndex((task) => task.id === taskId);\n    tasks[idx].done = tasks[idx].done ? false : true;\n    this.setState({\n      tasks,\n    });\n  }\n\n  addTask(taskText) {\n    const tasks = this.state.tasks;\n    const maxId = this.state.tasks.length\n      ? Math.max(...this.state.tasks.map((task) => task.id))\n      : 0;\n    this.setState({\n      // put new task at start of list\n      tasks: [{ done: false, text: taskText, id: maxId + 1 }].concat(tasks),\n    });\n  }\n\n  clearDone(event) {\n    event.preventDefault();\n    this.setState({\n      tasks: this.state.tasks.filter((task) => !task.done),\n    });\n  }\n\n  render() {\n    const clearDoneButton = (\n      <form onSubmit={(event) => this.clearDone(event)}>\n        <input className=\"border px-2\" type=\"submit\" value=\"Clear done\" />\n      </form>\n    );\n    return (\n      <div className=\"px-5 py-5\">\n        <h1 className=\"font-bold text-lg\">Todo</h1>\n        <Taskentry addTask={(taskText) => this.addTask(taskText)} />\n        <Tasklist\n          tasks={this.state.tasks}\n          toggleTaskDone={(taskId) => this.toggleTaskDone(taskId)}\n        />\n        {clearDoneButton}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}